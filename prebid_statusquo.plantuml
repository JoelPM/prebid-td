@startuml prebid_statusquo

participant User
participant "pub.com" as Pub
participant "prebid.js" as Pbjs
participant "prebid_[SSP_MODULE].js" as PbSspjs
participant SSPs
participant DSPs
participant "gam.js" as Gmjs
participant "GAM/AdX" as Gam

User -> Pub: 1. navigates browser to pub.com
activate Pub
Pub -> Pbjs: 2. load, configure, execute prebid.js
activate Pbjs
Pbjs -> PbSspjs: 3. invoke SSP bid adapter
activate PbSspjs
PbSspjs -> SSPs: 4. ad request
activate SSPs
SSPs -> SSPs: 5. traffic quality controls
SSPs -> DSPs: 6. make bid requestsÂ 
activate DSPs
SSPs <- DSPs: 7. respond with bids
deactivate DSPs
SSPs -> SSPs: 8. pub ad controls
PbSspjs <- SSPs: 9. ad w/price
deactivate SSPs
Pbjs <- PbSspjs: 10. ad w/price
deactivate PbSspjs

Pbjs -> Pbjs: 11. select appropriate ad
Pbjs -> Gmjs: 12. configure k/v pair for selected ad
activate Gmjs
Pub <- Pbjs: 13. wait for ad slot to load
deactivate Pbjs

note over Pub, Gmjs
At this point control over the ad loading process is transferred from Prebid.js to GAM (final selection layer)
end note

Pub -> Gmjs: 14. load slot
Gmjs -> Gam: 15. ad request
activate Gam
Gmjs <- Gam: 16. respond with winning ad, which may be prebid.js line item
deactivate Gam
alt GAM/AdX highest bid
Gmjs -> Gmjs: 17.1 render GAM/AdX result
else Prebid.js highest bid
Gmjs -> Pbjs: 17.2 render selected SSP ad
end
Pub <- Gmjs
deactivate Gmjs
User <- Pub: 18. show highest value advertisement
deactivate Pub
@enduml